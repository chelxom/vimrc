snippet article "Template for article" b
\documentclass{article}
\usepackage[a4paper, total={6.5in, 9in}]{geometry}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{array}
\usepackage{bm}
\usepackage{graphicx}

\begin{document}

$0

\end{document}
endsnippet

snippet pkg "Use package" b
\usepackage{$1}
endsnippet

snippet beg "Begin end" bA
\begin{$1}
    ${0}
\end{$1}
endsnippet

snippet \beg "Begin end"
\begin{$1}
    ${0}
\end{$1}
endsnippet

snippet $ "Inline math"
\$${VISUAL}$1\$$0
endsnippet

snippet \[ "Display math" b
\[
    ${VISUAL}$1
\]
$0
endsnippet

snippet desc "Description" b
\begin{description}
    \item[$1] $0
\end{description}
endsnippet

snippet - "Item"
\item[$1] $0
endsnippet

snippet / "Fraction"
\frac{${1:${VISUAL:1}}}{$2}
endsnippet

global !p
bracket_pairs = {
    "(":    ")",
    "[":    "]",
    "{":    "}",
    "<":    ">",
    "|":    "|",
    "||":   "||",
    "\\{":  "\\}",
    "\\langle":	"\\rangle",
    "\\lfloor":	"\\rfloor",
    "\\lceil":	"\\rceil",
}
endglobal

snippet "\\left(\S*)" "Brackets" r
\left`!p
snip.rv = match.group(1)
`$1${VISUAL}$2\right`!p
lb = match.group(1)
snip.rv = bracket_pairs.get(lb, lb)
`
endsnippet

# require \usepackage{bm}
snippet bm "Math bold" w
\bm{$1}
endsnippet

snippet "\b(bf|cal|it|rm|sf|tt|bb|frak|scr)" "Math fonts" r
\math`!p
snip.rv = match.group(1)
`{$1}
endsnippet

snippet tit "Text italic" w
\textit{$1}
endsnippet

# require \usepackage{amssymb}
snippet "([NZQPRC])\1" "Number domain" rA
\mathbb{`!p
snip.rv = match.group(1)
`}
endsnippet

global !p
_shortcuts = {
    # Single letter
    "A":    "\\forall",
    "E":    "\\exists",
    "L":    "\\lfloor",
    "P":    "\\prod",
    "S":    "\\sum",
    "U":    "\\bigcup",
    "V":    "\\bigvee",
    "e":    "\\epsilon",
    "l":    "\\lambda",
    "u":    "\\cup",
    "v":    "\\vee",
    "x":    "\\times",
    "/":    "\\not",
    "!":    "\\neg",
    "<":    "\\langle",
    ">":    "\\rangle",
    "(":    "\\subset",
    ")":    "\\supset",
    "*":    "\\star",
    "'":    "\\prime",
    "6":    "\\partial",
    # 2 letters
    "<-":    "\\leftarrow",
    "->":    "\\rightarrow",
    "<~":    "\\leftsquigarrow",
    "~>":    "\\rightsquigarrow",
    "<=":   "\\Leftarrow",
    "=>":   "\\Rightarrow",
    "(=":   "\\subseteq",
    ")=":   "\\supseteq",
    "~U":   "\\bigcap",
    "~V":   "\\bigwedge",
    "~u":   "\\cap",
    "~v":   "\\wedge",
    # 3 letters
    "...":  "\\ldots",
    "==>":  "\\implies",
    "|->":  "\\mapsto",
}
def match_shortcuts(snip):
    # Take the chars before the cursor, so that we can do rewrite in the middle
    # of a line.
    line = snip.buffer[snip.line][0:snip.column+1]
    # re.match doesn't match $.
    match = re.search("\\\\([^\\\\]+)$", line)
    if match is None:
        return False
    shortcut = match.group(1)
    return shortcut in _shortcuts
def rewrite_shortcuts(snip, s):
    snip.rv = _shortcuts[s]
endglobal

# Remark: only expand to symbol, not to the name of a command.
context "match_shortcuts(snip)"
snippet "\\([^\\]+)" "Shortcut collection" re
`!p
# match.group must be a valid shortcut since we checked in the context.
rewrite_shortcuts(snip, match.group(1))
`
endsnippet
